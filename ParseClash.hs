-- | This module is an external interface to Clash and our parsing of its output.
--   If you want to use our code you should only have to import this module and nothing else.
module ParseClash
(
parseClashFile, parseClashFiles,
ArchElem(..),
Wire(..),
Port(..),
Name,Id,PortId,
In,Out,
InPort,OutPort,
OpType,Value
) where

-- local imports
import Datastruct
import ParseVHDL

-- GHC API
import GHC.Paths ( libdir )

-- CLasH Imports
import CLasH.Translator(getVHDL)

import Language.VHDL.AST as AST

-- | Parse a single clash inputfile into an ArchElem
parseClashFile :: FilePath -> IO (ArchElem ())
parseClashFile x = parseClashFiles [x]

-- | Parse multiple clash inputfiles into a single ArchElem
parseClashFiles :: [FilePath] -> IO (ArchElem ())
-- test output van acc.hs, zonder de hele tijd clash aan te roepen
-- sneller, en ook nog steeds dezelfde namen
parseClashFiles ["acc.test"]
  = do
    putStrLn acc_output
    return (parseVhdlAsts acc_vhdls)

parseClashFiles xs
  = do
    vhdls <- getVHDL libdir xs
    return $ parseVhdlAsts vhdls

acc_vhdls = [(Basic "types",DesignFile [Library (Basic "IEEE"),Use (NSelected (NSimple (Basic "IEEE") :.: SSimple (Basic "std_logic_1164")) :.: All),Use (NSelected (NSimple (Basic "IEEE") :.: SSimple (Basic "numeric_std")) :.: All),Use (NSelected (NSimple (Basic "std") :.: SSimple (Basic "textio")) :.: All)] [LUPackageDec (PackageDec (Basic "types") [PDISD (SubtypeDec (Basic "tfvec_index") (SubtypeIn (Basic "integer") (Just (ConstraintRange (SubTypeRange (PrimLit "-1") (PrimName (NAttribute (AttribName (NSimple (Basic "integer")) (NSimple (Basic "high")) Nothing)))))))),PDISD (SubtypeDec (Basic "signed_8") (SubtypeIn (Basic "signed") (Just (ConstraintIndex (IndexConstraint [DownRange (PrimLit "7") (PrimLit "0")]))))),PDISS (AST.Function (Basic "show") [IfaceVarDec (Basic "s") (Basic "std_logic"),IfaceVarDec (Basic "paren") (Basic "boolean")] (Basic "string")),PDISS (AST.Function (Basic "show") [IfaceVarDec (Basic "b") (Basic "boolean"),IfaceVarDec (Basic "paren") (Basic "boolean")] (Basic "string")),PDISS (AST.Function (Basic "show") [IfaceVarDec (Basic "sint") (Basic "signed"),IfaceVarDec (Basic "paren") (Basic "boolean")] (Basic "string")),PDISS (AST.Function (Basic "show") [IfaceVarDec (Basic "uint") (Basic "unsigned"),IfaceVarDec (Basic "paren") (Basic "boolean")] (Basic "string"))]),LUPackageBody (PackageBody (Basic "types") [SubProgBody (AST.Function (Basic "show") [IfaceVarDec (Basic "s") (Basic "std_logic"),IfaceVarDec (Basic "paren") (Basic "boolean")] (Basic "string")) [] [IfSm (PrimName (NSimple (Basic "s")) :=: PrimLit "'1'") [ReturnSm (Just (PrimLit "\"High\""))] [] (Just (Else [ReturnSm (Just (PrimLit "\"Low\""))]))],SubProgBody (AST.Function (Basic "show") [IfaceVarDec (Basic "b") (Basic "boolean"),IfaceVarDec (Basic "paren") (Basic "boolean")] (Basic "string")) [] [IfSm (PrimName (NSimple (Basic "b"))) [ReturnSm (Just (PrimLit "\"True\""))] [] (Just (Else [ReturnSm (Just (PrimLit "\"False\""))]))],SubProgBody (AST.Function (Basic "show") [IfaceVarDec (Basic "sint") (Basic "signed"),IfaceVarDec (Basic "paren") (Basic "boolean")] (Basic "string")) [] [ReturnSm (Just (PrimName (NAttribute (AttribName (NSimple (Basic "integer")) (NIndexed (IndexedName (NSimple (Basic "image")) [PrimFCall (FCall (NSimple (Basic "to_integer")) [Nothing :=>: ADExpr (PrimName (NSimple (Basic "sint")))])])) Nothing))))],SubProgBody (AST.Function (Basic "show") [IfaceVarDec (Basic "uint") (Basic "unsigned"),IfaceVarDec (Basic "paren") (Basic "boolean")] (Basic "string")) [] [ReturnSm (Just (PrimName (NAttribute (AttribName (NSimple (Basic "integer")) (NIndexed (IndexedName (NSimple (Basic "image")) [PrimFCall (FCall (NSimple (Basic "to_integer")) [Nothing :=>: ADExpr (PrimName (NSimple (Basic "uint")))])])) Nothing))))]])]),(Basic "accComponent_0",DesignFile [Use (NSelected (NSimple (Basic "work") :.: SSimple (Basic "types")) :.: All),Use (NSimple (Basic "work") :.: All),Library (Basic "IEEE"),Use (NSelected (NSimple (Basic "IEEE") :.: SSimple (Basic "std_logic_1164")) :.: All),Use (NSelected (NSimple (Basic "IEEE") :.: SSimple (Basic "numeric_std")) :.: All),Use (NSelected (NSimple (Basic "std") :.: SSimple (Basic "textio")) :.: All)] [LUEntity (EntityDec (Basic "accComponent_0") [IfaceSigDec (Basic "xzgCF2") In (Basic "signed_8"),IfaceSigDec (Basic "reszgCPzgCP2") Out (Basic "signed_8"),IfaceSigDec (Basic "clock") In (Basic "std_logic"),IfaceSigDec (Basic "resetn") In (Basic "std_logic")]),LUArch (ArchBody (Basic "structural") (NSimple (Basic "accComponent_0")) [BDISD (SigDec (Basic "uzgCL2") (Basic "signed_8") Nothing),BDISD (SigDec (Basic "accStatezgCJ2") (Basic "signed_8") Nothing)] [CSSASm (NSimple (Basic "reszgCPzgCP2") :<==: ConWforms [] (Wform [WformElem (PrimName (NSimple (Basic "uzgCL2"))) Nothing]) Nothing),CSSASm (NSimple (Basic "uzgCL2") :<==: ConWforms [] (Wform [WformElem (PrimName (NSimple (Basic "accStatezgCJ2")) :+: PrimName (NSimple (Basic "xzgCF2"))) Nothing]) Nothing),CSBSm (BlockSm (Basic "state") [] (PMapAspect []) [BDISD (SigDec (Basic "initAccumval") (Basic "signed_8") Nothing)] [CSISm (CompInsSm (Basic "resetval_initAccumreXV2") (IUEntity (NSimple (Basic "initAccumComponent_1"))) (PMapAspect [Just (Basic "reszgDnzgDn3") :=>: ADExpr (PrimName (NSimple (Basic "initAccumval"))),Just (Basic "clock") :=>: ADExpr (PrimName (NSimple (Basic "clock"))),Just (Basic "resetn") :=>: ADExpr (PrimName (NSimple (Basic "resetn")))])),CSPSm (ProcSm (Basic "stateupdate") [Basic "clock",Basic "resetn",Basic "initAccumval"] [IfSm (PrimName (NSimple (Basic "resetn")) :=: PrimLit "'0'") [SigAssign (NSimple (Basic "accStatezgCJ2")) (Wform [WformElem (PrimName (NSimple (Basic "initAccumval"))) Nothing])] [ElseIf (PrimFCall (FCall (NSimple (Basic "rising_edge")) [Nothing :=>: ADName (NSimple (Basic "clock"))])) [SigAssign (NSimple (Basic "accStatezgCJ2")) (Wform [WformElem (PrimName (NSimple (Basic "uzgCL2"))) Nothing])]] Nothing])])])]),(Basic "initAccumComponent_1",DesignFile [Use (NSelected (NSimple (Basic "work") :.: SSimple (Basic "types")) :.: All),Use (NSimple (Basic "work") :.: All),Library (Basic "IEEE"),Use (NSelected (NSimple (Basic "IEEE") :.: SSimple (Basic "std_logic_1164")) :.: All),Use (NSelected (NSimple (Basic "IEEE") :.: SSimple (Basic "numeric_std")) :.: All),Use (NSelected (NSimple (Basic "std") :.: SSimple (Basic "textio")) :.: All)] [LUEntity (EntityDec (Basic "initAccumComponent_1") [IfaceSigDec (Basic "reszgDnzgDn3") Out (Basic "signed_8"),IfaceSigDec (Basic "clock") In (Basic "std_logic"),IfaceSigDec (Basic "resetn") In (Basic "std_logic")]),LUArch (ArchBody (Basic "structural") (NSimple (Basic "initAccumComponent_1")) [] [CSSASm (NSimple (Basic "reszgDnzgDn3") :<==: ConWforms [] (Wform [WformElem (PrimFCall (FCall (NSimple (Basic "to_signed")) [Nothing :=>: ADExpr (PrimLit "0"),Nothing :=>: ADExpr (PrimLit "8")])) Nothing]) Nothing)])])]
acc_output = "library IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.numeric_std.all;\nuse std.textio.all;\n\n\npackage types is\n\n     subtype tfvec_index is integer range -1 to integer'high;\n     \n     subtype signed_8 is signed (7 downto 0);\n     \n     function show (s : std_logic;\n                    paren : boolean)\n                   return string;\n     \n     function show (b : boolean;\n                    paren : boolean)\n                   return string;\n     \n     function show (sint : signed;\n                    paren : boolean)\n                   return string;\n     \n     function show (uint : unsigned;\n                    paren : boolean)\n                   return string;\n\nend package types;\n\n\npackage body types is\n\n     function show (s : std_logic;\n                    paren : boolean)\n                   return string is\n     begin\n          if s = '1' then\n               return \"High\";\n          else\n               return \"Low\";\n          end if;\n     end;\n     \n     function show (b : boolean;\n                    paren : boolean)\n                   return string is\n     begin\n          if b then\n               return \"True\";\n          else\n               return \"False\";\n          end if;\n     end;\n     \n     function show (sint : signed;\n                    paren : boolean)\n                   return string is\n     begin\n          return integer'image(to_integer(sint));\n     end;\n     \n     function show (uint : unsigned;\n                    paren : boolean)\n                   return string is\n     begin\n          return integer'image(to_integer(uint));\n     end;\n\nend package body types;\nuse work.types.all;\nuse work.all;\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.numeric_std.all;\nuse std.textio.all;\n\n\nentity accComponent_0 is\n     port (xzgCF2 : in signed_8;\n           reszgCPzgCP2 : out signed_8;\n           clock : in std_logic;\n           resetn : in std_logic);\nend entity accComponent_0;\n\n\narchitecture structural of accComponent_0 is\n     signal uzgCL2 : signed_8;\n     signal accStatezgCJ2 : signed_8;\nbegin\n     reszgCPzgCP2 <= uzgCL2;\n     \n     uzgCL2 <= accStatezgCJ2 + xzgCF2;\n     \n     state : block\n          signal initAccumval : signed_8;\n     begin\n          resetval_initAccumreXV2 : entity initAccumComponent_1\n                                         port map (reszgDnzgDn3 => initAccumval,\n                                                   clock => clock,\n                                                   resetn => resetn);\n          stateupdate : process (clock, resetn, initAccumval)\n          begin\n               if resetn = '0' then\n                    accStatezgCJ2 <= initAccumval;\n               elsif rising_edge(clock) then\n                    accStatezgCJ2 <= uzgCL2;\n               end if;\n          end process stateupdate;\n     end block state;\nend architecture structural;\nuse work.types.all;\nuse work.all;\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\nuse IEEE.numeric_std.all;\nuse std.textio.all;\n\n\nentity initAccumComponent_1 is\n     port (reszgDnzgDn3 : out signed_8;\n           clock : in std_logic;\n           resetn : in std_logic);\nend entity initAccumComponent_1;\n\n\narchitecture structural of initAccumComponent_1 is\nbegin\n     reszgDnzgDn3 <= to_signed(0, 8);\nend architecture structural;\n"
